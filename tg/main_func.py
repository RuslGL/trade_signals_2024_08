###########################
import os
import asyncio
from dotenv import load_dotenv

import re


from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

from sqlalchemy.ext.declarative import declarative_base

from code.db.signals import SignalsOperations
from code.db.users import UsersOperations
from code.tg.keyboards import Keyboards
from code.db.subscriptions import SubscriptionsOperations

from aiogram.types import CallbackQuery, User

load_dotenv()

kbd = Keyboards()



telegram_token = str(os.getenv('bot_token'))
channel_id = str(os.getenv('channel'))

DATABASE_URL = os.getenv('database_url')
db_users_op = UsersOperations(DATABASE_URL)

##### DELETE LATER
ADMIN_ID = os.getenv('owner_id')

dp = Dispatcher()

bot = Bot(token=telegram_token,
          default=DefaultBotProperties(
              parse_mode=ParseMode.HTML
          ),
          disable_web_page_preview=True
          )


"""
UTILS functions
"""

async def get_user_settings(user_id):
    try:
        params = await db_users_op.get_user_data(user_id)
        params = {key: value for key, value in params.items() if key != '_sa_instance_state'}
    except:
        params = False
    return params


# ####### CHANNELS ########
#     ############
#        #####

"""
# on adding new bot - correct privacy settings via bot father &
# add bot to channel admins
"""
@dp.channel_post()
async def channel_message_handler(message: Message):

    db_signals = SignalsOperations(DATABASE_URL)

    try:
        text = message.text

        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        first_line = text.split('\n')[0]

        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ
        words = first_line.split()
        first_word = words[0]
        last_word = words[-1]

        if first_word.lower()[:3] == 'buy':
            await db_signals.upsert_signal({
                "direction": "buy",
                "coin": last_word,
                "channel_id": str(message.chat.id),
            })

        if first_word.lower()[:4] == 'sell':
            await db_signals.upsert_signal({
                "direction": "sell",
                "coin": last_word,
                "channel_id": str(message.chat.id),
            })
    except:
        print('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏–≥–Ω–∞–ª')


# ####### ADMIN ########
#     ############
#        #####


# # –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
# async def on_startup():
#     for admin in admin_id:
#         await bot.send_message(
#             chat_id=admin,
#             text='<b>–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω!</b>',
#             # reply_markup=kbd.single_btn_back_to_main_menu
#             reply_markup=await kbd.admin_menu()
#             )






# ####### USER INTERFACE ########
#     ############
#        #####

"""
stop trade functions
"""

@dp.callback_query(F.data == 'stop_trade')
async def stop_trade_confirmation(message):
    telegram_id = message.from_user.id
    params = await get_user_settings(telegram_id)

    if params.get('stop_trading'):
        text = '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –¢–æ—Ä–≥–æ–≤–ª—é?'
    else:
        text = '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –¢–æ—Ä–≥–æ–≤–ª—é?'

    await bot.send_message(
        chat_id=telegram_id,
        text=text,
        reply_markup=await kbd.confirm_stop_trade_menu(params)
        )

@dp.callback_query(F.data == 'stop_trade_confirmed')
async def stop_trade_confirmed(message):
    telegram_id = message.from_user.id
    para = await get_user_settings(telegram_id)
    status =  para.get('stop_trading')
    print(status)

    if not status:
        text = '–¢–æ—Ä–≥–æ–≤–ª—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞\n\nüü¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–µ–π'
        fields = {
            'stop_trading': True
        }
        print('Otkluchaem torgovlu')

    else:
        text = '–¢–æ—Ä–≥–æ–≤–ª—è —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞\n\nüü¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–µ–π'
        fields = {
            'stop_trading': False
        }
        print('Vkluchaem torgovlu')
    try:
        await db_users_op.update_user_fields(telegram_id, fields)
    except Exception as e:
        text = '–°–µ–π—á–∞—Å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ'

    para = await get_user_settings(telegram_id)
    await bot.send_message(
        chat_id=telegram_id,
        text=text,
        reply_markup=await kbd.main_menu(para)
        )




# stop demo functions
@dp.callback_query(F.data == 'stop_demo')
async def stop_demo_confirmation(message: types.Message):
    telegram_id = message.from_user.id
    params = await get_user_settings(telegram_id)

    if params.get('trade_type') == 'demo':
        text = '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –¥–µ–º–æ-—Ä–µ–∂–∏–º –∏ –Ω–∞—á–∞—Ç—å –¢–æ—Ä–≥–æ–≤–ª—é –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —Ä—ã–Ω–∫–µ?'
    else:
        text = '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –¥–µ–º–æ-—Ä–µ–∂–∏–º?'

    await bot.send_message(
        chat_id=telegram_id,
        text=text,

        reply_markup=await kbd.confirm_stop_demo_menu(params)
        )

#'stop_demo_confirmed'
@dp.callback_query(F.data == 'stop_demo_confirmed')
async def stop_demo_confirmed(message):
    telegram_id = message.from_user.id
    para = await get_user_settings(telegram_id)
    status = para.get('trade_type')
    print(status)

    if status == 'demo':
        text = '–î–µ–º–æ-—Ä–µ–∂–∏–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω\n\nüü¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–µ–π'
        fields = {
            'trade_type': 'market'
        }

    else:
        text = '–î–µ–º–æ-—Ä–µ–∂–∏–º —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω\n\nüü¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–µ–π'
        fields = {
            'trade_type': 'demo'
        }
    try:
        await db_users_op.update_user_fields(telegram_id, fields)
    except Exception as e:
        text = '–°–µ–π—á–∞—Å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ'

    para = await get_user_settings(telegram_id)
    await bot.send_message(
        chat_id=telegram_id,
        text=text,
        reply_markup=await kbd.main_menu(para)
        )


# ##################

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ —Ä–∞–∑–¥–µ–ª–∞ "main_menu"
@dp.message(Command("start"))
# @dp.message()
@dp.callback_query(F.data == 'main_menu')
async def start(message: types.Message):
    telegram_id = message.from_user.id
    params = await get_user_settings(telegram_id)
    print(params)
    if not params:
        subscriptions_op = SubscriptionsOperations(DATABASE_URL)
        params = await subscriptions_op.get_all_subscriptions_data()
        await bot.send_message(
            chat_id=telegram_id,
            text=f' üîíüîíüîí\n\n–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º \n\nüîëüîëüîë'
                 f'\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:'
                 f'\n\n1 –ú–ï–°–Ø–¶ - {params.get('1 –ú–ï–°–Ø–¶').get('cost')} üí≤USDT'
                 f'\n\n6 –ú–ï–°–Ø–¶–ï–í - {params.get('6 –ú–ï–°–Ø–¶–ï–í').get('cost')} üí≤USDT'
                 f'\n\n1 –ì–û–î - {params.get('1 –ì–û–î').get('cost')} üí≤USDT'
                 f'\n\n–ù–ê–í–°–ï–ì–î–ê - {params.get('–ù–ê–í–°–ï–ì–î–ê').get('cost')} üí≤USDT'
                 f'\n\n–í—ã–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:',
            reply_markup=await kbd.buy_subscription(params)
        )
        return




###### –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–î–ü–ò–°–û–ö
@dp.callback_query(F.data.in_(['one_month', 'six_month', 'one_year', 'forewer']))
async def handle_subscription(callback_query):
    telegram_id = callback_query.from_user.id

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è callback_data
    action = callback_query.data
    subscriptions_op = SubscriptionsOperations(DATABASE_URL)
    # params = await subscriptions_op.get_all_subscriptions_data()

    params = {
        'subs': action,
    }

    # print(params)

    await bot.send_message(
        chat_id=telegram_id,
        text='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ\n\n\n\n\n\n'
             '\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –û–ü–õ–ê–ß–ï–ù–û',
        reply_markup=await kbd.confirm_payment(params)
    )

@dp.callback_query(F.data.in_(['one_month_conf', 'six_month_conf', 'one_year_conf', 'forewer_conf']))
async def confirm_subscription(callback_query):
    telegram_id = callback_query.from_user.id
    name = f'{callback_query.from_user.first_name} {callback_query.from_user.last_name}'

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è callback_data
    action = callback_query.data
    subscriptions_op = SubscriptionsOperations(DATABASE_URL)
    params = await subscriptions_op.get_all_subscriptions_data()

    if action == 'one_month':
        subs = params.get('1 –ú–ï–°–Ø–¶')
    if action == 'six_month':
        subs = params.get('6 –ú–ï–°–Ø–¶–ï–í')
    if action == 'one_year':
        subs = params.get('1 –ì–û–î')
    if action == 'forewer':
        subs = params.get('–ù–ê–í–°–ï–ì–î–ê')

    params = {
        'subs': '–ø—É—Å—Ç–æ',
    }

    await bot.send_message(
        chat_id=telegram_id,
        text='–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É, –æ–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.'
    )

    await bot.send_message(
        chat_id=ADMIN_ID,
        text=f'–Æ–∑–µ—Ä {name} c id {telegram_id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å? –ó–î–ï–°–¨ –ö–ù–û–ü–ö–ò –ü–û–î–í–ï–†–ñ–î–ï–ù–ò–Ø –ò –û–¢–ü–†–ê–í–ö–ê –Æ–ó–ï–†–£',
        reply_markup=await kbd.admin_payment_confirmation(params)
    )



F.text.regexp(r'Hello, .+')
@dp.callback_query(F.data.startswith('confirmed'))
async def confirmed_payment(message: types.Message):
    telegram_id = message.from_user.id

    #### telegram_id = message.from_user.id
    await bot.send_message(
        chat_id=telegram_id,
        text='–ò–ó–ú–ï–ù–ò–¢–¨ –í –ë–ê–ó–ï.  –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú –û–ü–õ–ê–¢–ê –ü–†–û–®–õ–ê'
    )

    await bot.send_message(
        chat_id=ADMIN_ID,
        text='–ò–ó–ú–ï–ù–ò–¢–¨ –í –ë–ê–ó–ï. –ü–û–î–ü–ò–°–ö–ê –Æ–ó–ï–†–ê –ü–û–î–í–ï–†–ñ–î–ï–ù–ê'
    )



# ##############################################

import os
import asyncio
from dotenv import load_dotenv

import re


from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

from sqlalchemy.ext.declarative import declarative_base

from code.db.signals import SignalsOperations
from code.db.users import UsersOperations
from code.tg.keyboards import Keyboards
from code.db.subscriptions import SubscriptionsOperations

from aiogram.types import CallbackQuery, User

load_dotenv()

kbd = Keyboards()



telegram_token = str(os.getenv('bot_token'))
channel_id = str(os.getenv('channel'))

DATABASE_URL = os.getenv('database_url')
db_users_op = UsersOperations(DATABASE_URL)

##### DELETE LATER
ADMIN_ID = os.getenv('owner_id')

dp = Dispatcher()

bot = Bot(token=telegram_token,
          default=DefaultBotProperties(
              parse_mode=ParseMode.HTML
          ),
          disable_web_page_preview=True
          )


"""
UTILS functions
"""

async def get_user_settings(user_id):
    try:
        params = await db_users_op.get_user_data(user_id)
        params = {key: value for key, value in params.items() if key != '_sa_instance_state'}
    except:
        params = False
    return params


# ####### CHANNELS ########
#     ############
#        #####

"""
# on adding new bot - correct privacy settings via bot father &
# add bot to channel admins
"""
@dp.channel_post()
async def channel_message_handler(message: Message):

    db_signals = SignalsOperations(DATABASE_URL)

    try:
        text = message.text

        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        first_line = text.split('\n')[0]

        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ
        words = first_line.split()
        first_word = words[0]
        last_word = words[-1]

        if first_word.lower()[:3] == 'buy':
            await db_signals.upsert_signal({
                "direction": "buy",
                "coin": last_word,
                "channel_id": str(message.chat.id),
            })

        if first_word.lower()[:4] == 'sell':
            await db_signals.upsert_signal({
                "direction": "sell",
                "coin": last_word,
                "channel_id": str(message.chat.id),
            })
    except:
        print('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏–≥–Ω–∞–ª')


# ####### ADMIN ########
#     ############
#        #####


# # –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
# async def on_startup():
#     for admin in admin_id:
#         await bot.send_message(
#             chat_id=admin,
#             text='<b>–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω!</b>',
#             # reply_markup=kbd.single_btn_back_to_main_menu
#             reply_markup=await kbd.admin_menu()
#             )






# ####### USER INTERFACE ########
#     ############
#        #####

"""
stop trade functions
"""

@dp.callback_query(F.data == 'stop_trade')
async def stop_trade_confirmation(message):
    telegram_id = message.from_user.id
    params = await get_user_settings(telegram_id)

    if params.get('stop_trading'):
        text = '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –¢–æ—Ä–≥–æ–≤–ª—é?'
    else:
        text = '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –¢–æ—Ä–≥–æ–≤–ª—é?'

    await bot.send_message(
        chat_id=telegram_id,
        text=text,
        reply_markup=await kbd.confirm_stop_trade_menu(params)
        )

@dp.callback_query(F.data == 'stop_trade_confirmed')
async def stop_trade_confirmed(message):
    telegram_id = message.from_user.id
    para = await get_user_settings(telegram_id)
    status =  para.get('stop_trading')
    print(status)

    if not status:
        text = '–¢–æ—Ä–≥–æ–≤–ª—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞\n\nüü¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–µ–π'
        fields = {
            'stop_trading': True
        }
        print('Otkluchaem torgovlu')

    else:
        text = '–¢–æ—Ä–≥–æ–≤–ª—è —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞\n\nüü¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–µ–π'
        fields = {
            'stop_trading': False
        }
        print('Vkluchaem torgovlu')
    try:
        await db_users_op.update_user_fields(telegram_id, fields)
    except Exception as e:
        text = '–°–µ–π—á–∞—Å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ'

    para = await get_user_settings(telegram_id)
    await bot.send_message(
        chat_id=telegram_id,
        text=text,
        reply_markup=await kbd.main_menu(para)
        )




# stop demo functions
@dp.callback_query(F.data == 'stop_demo')
async def stop_demo_confirmation(message: types.Message):
    telegram_id = message.from_user.id
    params = await get_user_settings(telegram_id)

    if params.get('trade_type') == 'demo':
        text = '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –¥–µ–º–æ-—Ä–µ–∂–∏–º –∏ –Ω–∞—á–∞—Ç—å –¢–æ—Ä–≥–æ–≤–ª—é –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —Ä—ã–Ω–∫–µ?'
    else:
        text = '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –¥–µ–º–æ-—Ä–µ–∂–∏–º?'

    await bot.send_message(
        chat_id=telegram_id,
        text=text,

        reply_markup=await kbd.confirm_stop_demo_menu(params)
        )

#'stop_demo_confirmed'
@dp.callback_query(F.data == 'stop_demo_confirmed')
async def stop_demo_confirmed(message):
    telegram_id = message.from_user.id
    para = await get_user_settings(telegram_id)
    status = para.get('trade_type')
    print(status)

    if status == 'demo':
        text = '–î–µ–º–æ-—Ä–µ–∂–∏–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω\n\nüü¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–µ–π'
        fields = {
            'trade_type': 'market'
        }

    else:
        text = '–î–µ–º–æ-—Ä–µ–∂–∏–º —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω\n\nüü¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–µ–π'
        fields = {
            'trade_type': 'demo'
        }
    try:
        await db_users_op.update_user_fields(telegram_id, fields)
    except Exception as e:
        text = '–°–µ–π—á–∞—Å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ'

    para = await get_user_settings(telegram_id)
    await bot.send_message(
        chat_id=telegram_id,
        text=text,
        reply_markup=await kbd.main_menu(para)
        )


# ##################

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ —Ä–∞–∑–¥–µ–ª–∞ "main_menu"
@dp.message(Command("start"))
# @dp.message()
@dp.callback_query(F.data == 'main_menu')
async def start(message: types.Message):
    telegram_id = message.from_user.id
    params = await get_user_settings(telegram_id)
    print(params)
    if not params:
        subscriptions_op = SubscriptionsOperations(DATABASE_URL)
        params = await subscriptions_op.get_all_subscriptions_data()
        params['new_user_id'] = telegram_id
        print(params)
        await bot.send_message(
            chat_id=telegram_id,
            text=f' üîíüîíüîí\n\n–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º \n\nüîëüîëüîë'
                 f'\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:'
                 f'\n\n1 –ú–ï–°–Ø–¶ - {params.get('1 –ú–ï–°–Ø–¶').get('cost')} üí≤USDT'
                 f'\n\n6 –ú–ï–°–Ø–¶–ï–í - {params.get('6 –ú–ï–°–Ø–¶–ï–í').get('cost')} üí≤USDT'
                 f'\n\n1 –ì–û–î - {params.get('1 –ì–û–î').get('cost')} üí≤USDT'
                 f'\n\n–ù–ê–í–°–ï–ì–î–ê - {params.get('–ù–ê–í–°–ï–ì–î–ê').get('cost')} üí≤USDT'
                 f'\n\n–í—ã–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:',
            reply_markup=await kbd.buy_subscription(params)
        )
        return




###### –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–î–ü–ò–°–û–ö
@dp.callback_query(F.data.in_(['one_month', 'six_month', 'one_year', 'forewer']))
async def handle_subscription(callback_query):
    telegram_id = callback_query.from_user.id

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è callback_data
    action = callback_query.data
    subscriptions_op = SubscriptionsOperations(DATABASE_URL)
    # params = await subscriptions_op.get_all_subscriptions_data()

    params = {
        'subs': action,
        'id': telegram_id
    }

    # print(params)

    await bot.send_message(
        chat_id=telegram_id,
        text='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ\n\n\n\n\n\n'
             '\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –û–ü–õ–ê–ß–ï–ù–û',
        reply_markup=await kbd.confirm_payment(params)
    )



#@dp.callback_query(F.data.in_(['one_month_conf', 'six_month_conf', 'one_year_conf', 'forewer_conf']))

@dp.callback_query(F.data.startswith('conf_'))
async def confirm_subscription(callback_query):
    telegram_id = callback_query.from_user.id
    name = f'{callback_query.from_user.first_name} {callback_query.from_user.last_name}'

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è callback_data
    action = callback_query.data
    #subscriptions_op = SubscriptionsOperations(DATABASE_URL)
    #params = await subscriptions_op.get_all_subscriptions_data()

    if 'one_month' in action:
        subs = '1 –ú–ï–°–Ø–¶'
    if 'six_month' in action:
        subs = '6 –ú–ï–°–Ø–¶–ï–í'
    if 'one_year' in action:
        subs = '1 –ì–û–î'
    if 'forewer' in action:
        subs = '–ù–ê–í–°–ï–ì–î–ê'

    params = {
        'subs': subs,
        'user_id': telegram_id,
    }
    #print(params)
    await bot.send_message(
        chat_id=telegram_id,
        text='–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É, –æ–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.'
    )

    await bot.send_message(
        chat_id=ADMIN_ID,
        text=f'–Æ–∑–µ—Ä {name} c id {telegram_id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å? –ó–î–ï–°–¨ –ö–ù–û–ü–ö–ò –ü–û–î–í–ï–†–ñ–î–ï–ù–ò–Ø –ò –û–¢–ü–†–ê–í–ö–ê –Æ–ó–ï–†–£',
        reply_markup=await kbd.admin_payment_confirmation(params)
    )



#F.text.regexp(r'Hello, .+')
@dp.callback_query(F.data.startswith('confirmed'))
async def confirmed_payment(callback_query):
    telegram_id = callback_query.from_user.id
    action = callback_query.data
    parts = action.split("_")
    subs = parts[1]
    user_id = parts[2]


    #### telegram_id = message.from_user.id
    await bot.send_message(
        chat_id=user_id,
        text='–ò–ó–ú–ï–ù–ò–¢–¨ –í –ë–ê–ó–ï.  –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú –û–ü–õ–ê–¢–ê –ü–†–û–®–õ–ê'
    )

    await bot.send_message(
        chat_id=telegram_id,
        text=f'–ò–ó–ú–ï–ù–ò–¢–¨ –í –ë–ê–ó–ï. –ü–û–î–ü–ò–°–ö–ê –Æ–ó–ï–†–ê –ü–û–î–í–ï–†–ñ–î–ï–ù–ê\n\n\n'
             f'user_id={user_id}\n'
             f'–ø–æ–¥–ø–∏—Å–∫–∞ = {subs}'
    )



# ##############################################

async def start_bot():

    await bot.delete_webhook(drop_pending_updates=True)
    #dp.startup.register(on_startup)
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == '__main__':
    asyncio.run(start_bot())